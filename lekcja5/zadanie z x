#include<iostream>
#include<algorithm>








int main(){
    int elem= -1;
    int indeks= -1;
    int T[] = {5,3,6, 2, 8, 7, 4};
    int size = sizeof(T) / sizeof(T[0]);
    int x =  5;
    
    
    std::sort(T, T + size);


    for(int i=0; i<size ; i++ ){
        if(T[i]<= x && T[i] > elem){
            elem=T[i];
            indeks=i;
        
    }
}
    if(elem> -1){
        std::cout << "największa liczba najbliższa lub równa  x to : " << " " << elem << " "  << "ma ona ideks : " << " "  << indeks << std::endl;
    }

    else{
        std::cout << "nie ma w tablicy mniejszej lub równej liczby " << " "  << elem << std::endl;
    }

 





    return 0;
}

//option 2

#include<iostream>
#include<algorithm>

int binarySearch(int arr[], int left, int right, int target) {
    // TODO: Implement Binary Search algorithm
      //finds the middle of the array
    if(right>=left){
        int mid = left + (right-left)/2;
        
    //checks if the middle is  the target if it is the function returns it
    if(arr[mid]==target)
        return mid;
    
    //checks if the middle is smaller than the target
    if(arr[mid]<target)
        return binarySearch(arr,left,mid-1,target);
    
        // if all of the above are false the target must be bigger so that is what the function returns.
        return binarySearch(arr,mid+1,right,target);
    }
    return -1;

int main(){

 int T[] = {5,3,6, 2, 8, 7, 4};
    int size = sizeof(T) / sizeof(T[0]);
    int x =  5;
    
    
    std::sort(T, T + size);






return 0;
}
